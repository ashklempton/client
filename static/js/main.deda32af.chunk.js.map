{"version":3,"sources":["Home.jsx","Monitor.jsx","Navbar.jsx","About.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","className","to","Component","Monitor","props","state","humidityArray","x","Math","floor","Date","getTime","y","temperatureArray","initialisedTime","axios","get","then","res","setState","data","humidity","temperature","humidDataLength","this","length","tempDataLength","shift","interval1","setInterval","getData","interval2","clearArray","clearInterval","datasets","label","backgroundColor","borderColor","borderWidth","fill","showLine","options","scales","xAxes","type","ticks","maxTicksLimit","fontSize","color","height","width","Navbar","Fragment","About","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6MA2BeA,EAxBf,iLAEQ,OACI,6BACI,yBAAKC,UAAU,oBACX,yBAAKA,UAAU,UACX,sDACA,yBAAKA,UAAU,mBAEnB,yBAAKA,UAAU,eACX,4KACA,2EAEJ,yBAAKA,UAAU,gBACX,kBAAC,IAAD,CAAMC,GAAG,YACL,4BAAQD,UAAU,iBAAlB,yBAf5B,GAA0BE,a,kDC0HXC,EAxHf,YACI,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACTC,cAAe,CACX,CACIC,EAAGC,KAAKC,OAAM,IAAIC,MAAOC,WACzBC,EAAG,IAGXC,iBAAkB,CACd,CACIN,EAAGC,KAAKC,OAAM,IAAIC,MAAOC,WACzBC,EAAG,IAGXE,gBAAiBN,KAAKC,OAAM,IAAIC,MAAOC,YAhB5B,EADvB,uEAqBe,IAAD,OACNI,IAAMC,IAAI,yDACLC,MAAK,SAAAC,GACF,EAAKC,SAAS,CACVb,cAAc,GAAD,mBAAM,EAAKD,MAAMC,eAAjB,CAAgC,CACzCC,EAAGC,KAAKC,OAAM,IAAIC,MAAOC,WACzBC,EAAGM,EAAIE,KAAKC,YAGhBR,iBAAiB,GAAD,mBAAM,EAAKR,MAAMQ,kBAAjB,CAAmC,CAC/CN,EAAGC,KAAKC,OAAM,IAAIC,MAAOC,WACzBC,EAAGM,EAAIE,KAAKE,sBAhCpC,mCAwCQ,IAAIC,EAAkBC,KAAKnB,MAAMC,cAAcmB,OAC3CC,EAAiBF,KAAKnB,MAAMQ,iBAAiBY,OAE7CF,EAAkB,GAClBC,KAAKnB,MAAMC,cAAcqB,QAGzBD,EAAiB,GACjBF,KAAKnB,MAAMQ,iBAAiBc,UAhDxC,0CAoDyB,IAAD,OAChBH,KAAKI,UAAYC,aAAY,kBAAM,EAAKC,YAAW,KACnDN,KAAKO,UAAYF,aAAY,kBAAM,EAAKG,eAAc,OAtD9D,6CA0DQC,cAAcT,KAAKI,WACnBK,cAAcT,KAAKO,aA3D3B,+BAkEQ,OAAIP,KAAKnB,MAAMC,cAAcmB,OAAS,GAAKD,KAAKnB,MAAMQ,iBAAiBY,OAAS,EAExE,6BACI,yBAAKzB,UAAU,kBACX,yBAAKA,UAAU,mBACX,kBAAC,IAAD,CACIoB,KAAM,CACFc,SAAU,CACN,CACIC,MAAO,cACPC,gBAAiB,qBACjBC,YAAa,qBACbC,YAAa,EACbC,MAAM,EACNnB,KAAMI,KAAKnB,MAAMQ,iBACjB2B,UAAU,GAEd,CACIL,MAAO,WACPC,gBAAiB,mBACjBC,YAAa,mBACbC,YAAa,EACbC,MAAM,EACNnB,KAAMI,KAAKnB,MAAMC,cACjBkC,UAAU,KAItBC,QAAS,CACLC,OAAQ,CACJC,MAAO,CAAC,CACJC,KAAM,OACNC,MAAO,CACHC,cAAe,GACfC,SAAU,YAY9C,yBAAK/C,UAAU,UACX,kBAAC,IAAD,CAAQ4C,KAAK,YAAYI,MAAM,SAASC,OAAQ,GAAIC,MAAO,UAjH3E,GAA6BhD,aCFd,SAASiD,IACpB,OACI,kBAAC,IAAMC,SAAP,KACI,yBAAKpD,UAAU,UACX,yBAAKA,UAAU,gBACX,wCAEJ,wBAAIA,UAAU,gBACV,wBAAIA,UAAU,oBACV,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,YAAvB,SAEJ,wBAAIA,UAAU,oBACV,kBAAC,IAAD,CAAMC,GAAG,WAAWD,UAAU,YAA9B,YAEJ,wBAAIA,UAAU,oBACV,kBAAC,IAAD,CAAMC,GAAG,SAASD,UAAU,YAA5B,UAEJ,yBAAKA,UAAU,2BACX,yBAAKA,UAAU,sBACf,yBAAKA,UAAU,sBACf,yBAAKA,UAAU,yBAK3B,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,qBAAf,QACA,wBAAIA,UAAU,qBACV,wBAAIA,UAAU,yBACV,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,oBAAvB,UAEJ,wBAAIA,UAAU,yBACV,kBAAC,IAAD,CAAMC,GAAG,WAAWD,UAAU,oBAA9B,aAEJ,wBAAIA,UAAU,yBACV,kBAAC,IAAD,CAAMC,GAAG,SAASD,UAAU,oBAA5B,aCpCT,SAASqD,IACpB,OACI,kBAAC,IAAMD,SAAP,KACI,yBAAKpD,UAAU,mBAEX,yBAAKA,UAAU,gBACX,wBAAIA,UAAU,YAAd,sCACA,uBAAGA,UAAU,UAAb,wOAGJ,yBAAKA,UAAU,gBACX,wBAAIA,UAAU,YAAd,8BACA,uBAAGA,UAAU,UAAb,sPAKJ,yBAAKA,UAAU,gBACX,wBAAIA,UAAU,YAAd,uBACA,uBAAGA,UAAU,UAAb,iOAIJ,yBAAKA,UAAU,aClBxB,IAeQsD,EAff,iLAEI,OACE,6BACE,kBAAC,IAAD,KACA,kBAACH,EAAD,MACE,kBAAC,IAAD,CAAOI,KAAK,IAAIC,OAAK,EAACC,UAAW1D,IACjC,kBAAC,IAAD,CAAOwD,KAAK,WAAWE,UAAWtD,IAClC,kBAAC,IAAD,CAAOoD,KAAK,SAASE,UAAWJ,UAR1C,GAAyBnD,aCKLwD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpD,MAAK,SAAAqD,GACjCA,EAAaC,iB","file":"static/js/main.deda32af.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n\nexport class Home extends Component {\n    render() {\n        return (\n            <div>\n                <div className=\"center-container\">\n                    <div className=\"header\">\n                        <h1>A Simple Plant Monitor</h1>\n                        <div className=\"border-bottom\"></div>\n                    </div>\n                    <div className=\"description\">\n                        <p>This Monitoring application takes temperature and humidity readings from locally fitted sensors and displays them in a real time environment.</p>\n                        <p> To start the monitor select: Start Monitor</p>\n                    </div>\n                    <div className=\"start-button\">\n                        <Link to=\"/monitor\">\n                            <button className=\"start-monitor\">Start Monitor</button>\n                        </Link>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Home\n","import React, { Component } from 'react'\nimport axios from 'axios';\nimport { Scatter } from 'react-chartjs-2';\nimport Loader from 'react-loader-spinner';\n\nexport class Monitor extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            humidityArray: [\n                {\n                    x: Math.floor(new Date().getTime()),\n                    y: 0\n                }\n            ],\n            temperatureArray: [\n                {\n                    x: Math.floor(new Date().getTime()),\n                    y: 0\n                }\n            ],\n            initialisedTime: Math.floor(new Date().getTime())\n        }\n    }\n\n    getData() {\n        axios.get('https://plant-monitoring-system.herokuapp.com/getData')\n            .then(res => {\n                this.setState({\n                    humidityArray: [...this.state.humidityArray, {\n                        x: Math.floor(new Date().getTime()),\n                        y: res.data.humidity\n                    }\n                    ],\n                    temperatureArray: [...this.state.temperatureArray, {\n                        x: Math.floor(new Date().getTime()),\n                        y: res.data.temperature\n                    }\n                    ]\n                })\n            })\n    }\n\n    clearArray() {\n        let humidDataLength = this.state.humidityArray.length\n        let tempDataLength = this.state.temperatureArray.length\n\n        if (humidDataLength > 9) {\n            this.state.humidityArray.shift();\n        }\n\n        if (tempDataLength > 9) {\n            this.state.temperatureArray.shift();\n        }\n    }\n\n    componentDidMount() {\n        this.interval1 = setInterval(() => this.getData(), 1000 * 3);\n        this.interval2 = setInterval(() => this.clearArray(), 1000 * 3);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval1);\n        clearInterval(this.interval2);\n    }\n\n\n\n    render() {\n\n        if (this.state.humidityArray.length > 1 && this.state.temperatureArray.length > 1) {\n            return (\n                <div>\n                    <div className=\"flex-container\">\n                        <div className=\"chart-container\">\n                            <Scatter\n                                data={{\n                                    datasets: [\n                                        {\n                                            label: \"Temperature\",\n                                            backgroundColor: 'rgba(75,192,192,1)',\n                                            borderColor: 'rgb(100, 164, 201)',\n                                            borderWidth: 3,\n                                            fill: false,\n                                            data: this.state.temperatureArray,\n                                            showLine: true\n                                        },\n                                        {\n                                            label: \"Humidity\",\n                                            backgroundColor: 'rgb(50, 166, 90)',\n                                            borderColor: 'rgb(50, 166, 90)',\n                                            borderWidth: 3,\n                                            fill: false,\n                                            data: this.state.humidityArray,\n                                            showLine: true\n                                        }\n                                    ]\n                                }}\n                                options={{\n                                    scales: {\n                                        xAxes: [{\n                                            type: 'time',\n                                            ticks: {\n                                                maxTicksLimit: 11,\n                                                fontSize: 8\n                                            }\n                                        }]\n                                    }\n                                }}\n                            />\n                        </div>\n                    </div>\n                </div>\n            )\n        }\n        return (\n            <div className=\"loader\">\n                <Loader type=\"ThreeDots\" color=\"#00000\" height={80} width={80}/>\n            </div>\n        )\n    }\n\n}\n\nexport default Monitor\n","import React from 'react'\nimport { Link } from 'react-router-dom';\n\nexport default function Navbar() {\n    return (\n        <React.Fragment>\n            <div className=\"navbar\">\n                <div className=\"navbar-title\">\n                    <h2>Monitor</h2>\n                </div>\n                <ul className=\"navbar-links\">\n                    <li className=\"navbar-link-item\">\n                        <Link to=\"/\" className=\"nav-link\">Home</Link>\n                    </li>\n                    <li className=\"navbar-link-item\">\n                        <Link to=\"/monitor\" className=\"nav-link\">Monitor</Link>\n                    </li>\n                    <li className=\"navbar-link-item\">\n                        <Link to=\"/about\" className=\"nav-link\">About</Link>\n                    </li>\n                    <div className=\"navbar-collapsible-bars\">\n                        <div className=\"collapsible-bar-1\"></div>\n                        <div className=\"collapsible-bar-2\"></div>\n                        <div className=\"collapsible-bar-3\"></div>\n                    </div>\n                </ul>\n            </div>\n\n            <div className=\"navbar-overlay\">\n                <div className=\"collapsible-close\">&times;</div>\n                <ul className=\"collapsible-links\">\n                    <li className=\"collapsible-link-item\">\n                        <Link to=\"/\" className=\"collapsible-link\"> Home</Link>\n                    </li>\n                    <li className=\"collapsible-link-item\">\n                        <Link to=\"/monitor\" className=\"collapsible-link\"> Monitor</Link>\n                    </li>\n                    <li className=\"collapsible-link-item\">\n                        <Link to=\"/about\" className=\"collapsible-link\">About</Link>\n                    </li>\n                </ul>\n            </div>\n\n\n        </React.Fragment>\n    )\n}\n","import React from 'react'\n\nexport default function About() {\n    return (\n        <React.Fragment>\n            <div className=\"about-container\">\n\n                <div className=\"app-question\">\n                    <h2 className='question'>What is A Plant Monitoring System?</h2>\n                    <p className=\"answer\">Lorem ipsum dolor sit amet consectetur, adipisicing elit. Sit libero doloribus incidunt atque cum aliquid exercitationem facilis voluptatibus neque sint explicabo, illum reprehenderit perferendis tempora? Vero rem quo saepe at.</p>\n                </div>\n\n                <div className=\"app-question\">\n                    <h2 className=\"question\">Why Is This System Needed?</h2>\n                    <p className=\"answer\">\n                        Lorem ipsum dolor sit amet consectetur adipisicing elit. Quae numquam excepturi tenetur maxime fugiat voluptatibus vitae possimus sequi ipsam reiciendis? Molestiae, voluptatibus quia repellat similique tenetur recusandae omnis voluptates ea.\n                    </p>\n                </div>\n\n                <div className=\"app-question\">\n                    <h2 className=\"question\">How does This Work?</h2>\n                    <p className=\"answer\">\n                        Lorem ipsum dolor sit amet consectetur adipisicing elit. Suscipit totam temporibus vel similique explicabo iure optio numquam corporis quis. Eius adipisci nihil reprehenderit quia laborum tempora illo nisi ipsum quaerat?\n                    </p>\n                </div>\n                <div className=\"spacer\"></div>\n\n            </div>\n        </React.Fragment>\n    )\n}\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router , Route } from 'react-router-dom';\nimport Home from './Home';\nimport Monitor from './Monitor';\nimport Navbar from './Navbar'\nimport About from './About';\n\nexport class App extends Component {\n  render() {\n    return (\n      <div>\n        <Router>\n        <Navbar></Navbar>\n          <Route path=\"/\" exact component={Home}/>\n          <Route path=\"/monitor\" component={Monitor}/>\n          <Route path=\"/about\" component={About}/>\n        </Router>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}